Week 10 code snipets.

HTML
	<p>
	  Enter your phone number (with area code) and then click "Check".
	  <br>
	  The expected format is like ###-###-####.
	</p>
	<form action="#">
	  <input id="phone">
		<button onclick="testInfo(document.getElementById('phone'));">Check</button>
	</form>


JavaScript
	var re = /(?:\d{3}|\(\d{3}\))([-\/\.])\d{3}\1\d{4}/;
	function testInfo(phoneInput) {
	  var OK = re.exec(phoneInput.value);
	  if (!OK) {
		console.error(phoneInput.value + ' isn\'t a phone number with area code!'); 
	  } else {
		console.log('Thanks, your phone number is ' + OK[0]);}
	} 

Advanced searching with flags
	g	Global search.				RegExp.prototype.global
	i	Case-insensitive search.	RegExp.prototype.ignoreCase
	m	Multi-line search.			RegExp.prototype.multiline
	s	Allows . to match newline characters. (Added in ES2018, not yet supported in Firefox).		RegExp.prototype.dotAll
	u	"unicode"; treat a pattern as a sequence of unicode code points.							RegExp.prototype.unicode
	y	Perform a "sticky" search that matches starting at the current position in the target string. See sticky.					RegExp.prototype.sticky
	
To include a flag with the regular expression, use this syntax:
	var re = /pattern/flags;
or
	var re = new RegExp('pattern', 'flags');
	
